# Connect-AzAccount

# check if required module is already loaded
$module = Get-Module -name "Az.ResourceGraph"
	If (($module.Name) -match ("Az.ResourceGraph")){
		write-host "Resource Graph module is loaded"}
		else{
    # install the resource graph module from powershell gallery
    Install-Module -Name Az.ResourceGraph}

function Get-AzCachedAccessToken() {
  $azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile
  $currentAzureContext = Get-AzContext
  $profileClient = New-Object Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient($azProfile)
  Write-Debug ("Getting access token for tenant" + $currentAzureContext.Subscription.TenantId)
  $token = $profileClient.AcquireAccessToken($currentAzureContext.Subscription.TenantId)
  $token.AccessToken
  $accessToken = "Bearer " + $($token.AccessToken)
}

$token = Get-AzCachedAccessToken

$requestHeader = @{
  "Authorization" = $accessToken
  "Content-Type" = "application/json"
}
# get a list of all unhealthy virtual machines from 'enable the built-in vulnerability assessment'
$vms = Search-AzGraph -Query "securityresources | where type == 'microsoft.security/assessments' and name == '550e890b-e652-4d22-8274-60b3bdb24c63' | extend status = properties.status.code, resourceid = properties.resourceDetails.Id | where status == 'Unhealthy' | project resourceid"
foreach ($vm in $vms){
    # check the power state of each vm
    $vmView = Invoke-RestMethod -Uri "https://management.azure.com/$($vm.resourceid)/instanceView?api-version=2019-12-01" -Method GET -Headers $requestHeader
    # install qualys extension if the vm is currently running
    if ($vmview.statuses -like '*VM running*') {
        Write-Host $vm.resourceid.Split("/")[-1] "is running. Enabling the built-in vulnerability assessment" -ForegroundColor Green
        $vaapi = Invoke-RestMethod -Uri "https://management.azure.com/$($vm.resourceid)/providers/Microsoft.Security/serverVulnerabilityAssessments/default?api-Version=2015-06-01-preview" -Method PUT -Headers $requestHeader
    }
    else {
        Write-Host $vm.resourceid.Split("/")[-1] "is currently stopped. Skipping this one" -ForegroundColor Yellow
    }
}